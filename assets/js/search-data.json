{
  
    
        "post0": {
            "title": "Resizing an image with a Keras Layer",
            "content": "Mirror facing mirror - nowhere else. . – Ikkyu . In this short tutorial we will see one way of resizing an image with the use of a Keras Layer. . There are several impressive disadvantages to achieve this single purpose in the suggested way: . complicated | slow | memory inefficent | . Enjoy . Of course Tensorflow is awesome - we just wouldn&#39;t use such a powerful library to achieve only this relative simple task. Nevertheless, later on, we might want to resize images in complex models. . Getting ready . import numpy as np import tensorflow as tf from matplotlib import pyplot as plt from IPython import display image_path = &#39;../images/fujiyama.png&#39; . Preprocessing image . Loading the image file into PIL format: https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/load_img . | Converting the PIL Image instance to a Numpy array: https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/img_to_array . | Determining the height and width of the image. . | Converting the single image into a batch. (Keras layers are expecting a batch as input.) . | image_pil = tf.keras.preprocessing.image.load_img(image_path) #(1) image_np_array = tf.keras.preprocessing.image.img_to_array(image_pil) #(2) print(&quot;Image numpy array shape: {}&quot;.format(image_np_array.shape)) height,width,_ = image_np_array.shape #(3) image_np_array_batch = np.array([image_np_array]) #(4) . Image numpy array shape: (1024, 1536, 3) . Original Image . print(&quot;Image height/width: {}/{}&quot;.format(height,width)) plt.figure(figsize=(12,12)) plt.title(&#39;Original Image&#39;) plt.imshow(image_np_array/255.0) plt.plot() . Image height/width: 1024/1536 . [] . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T13:41:38.532977 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Resizing the image . 1) Creating an Image resizing layer for given output height &amp; width with Kears https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/Resizing . 2) Resizing the image . height_resized = height // 2 width_resized = width // 2 print(&quot;Desired output image height/width: {}/{}&quot;.format(height_resized,width_resized)) resize_layer = tf.keras.layers.experimental.preprocessing.Resizing(height_resized,width_resized,interpolation=&#39;bilinear&#39;) #(1) image_resized_np_array_batch = resize_layer(image_np_array_batch) #(2) print(&quot;Keras Resizing Layer output shape (Numpy Array): {}&quot;.format(image_resized_np_array_batch.shape)) . Desired output image height/width: 512/768 Keras Resizing Layer output shape (Numpy Array): (1, 512, 768, 3) . The glorious result . image_resized_np_array = image_resized_np_array_batch[0] height_resized,width_resized,_ = image_resized_np_array.shape print(&quot;Resized image height/width: {}/{}&quot;.format(height_resized,width_resized)) plt.figure(figsize=(6,6)) plt.title(&#39;Resized Image&#39;) plt.imshow(image_resized_np_array/255.0) plt.plot() . Resized image height/width: 512/768 . [] . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T13:41:39.270441 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/",
            "url": "https://dorjeduck.github.io/ai-candies/2020/10/25/image-resizing.html",
            "relUrl": "/2020/10/25/image-resizing.html",
            "date": " • Oct 25, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Hello visual world",
          "content": "I study my mind and therefore all appearances are my texts. . – Milarepa . This blog is driven by the idea to teach myself how to process and generate images with Tensorflow. The early posts will mostly cover basic techniques which hopefully come in handy years later when I start trying to impress myself with more complex models based on these earlier insights. . Please feel invited to come along with me on this journey. I will try to include links to the respective parts of the excellent Tensorflow documentation or other gems on the web as much as possible in order to make this whole endeavour at least of some benefit. . As always, feedback and suggestions of any kind are highly appreciated. .",
          "url": "https://dorjeduck.github.io/ai-candies/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dorjeduck.github.io/ai-candies/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}