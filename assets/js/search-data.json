{
  
    
        "post0": {
            "title": "Central cropping",
            "content": "Swim out of your little pond. . – Rumi . In this short tutorial we will see one way of cropping the central portion of two images to a given target height and width with the use of a Keras Layer. It is important to notice that the two images have to be of same height and width in order to be able to crop them togther in one batch. . Getting ready . import numpy as np import os import tensorflow as tf from matplotlib import pyplot as plt from IPython import display target_height = 200 target_width = 800 image_paths = [] image_paths.append(&#39;./images/boot_ganga_1.jpg&#39;) image_paths.append(&#39;./images/boot_ganga_2.jpg&#39;) . Preprocessing image . Loading two image files into PIL format: https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/load_img . | Converting the PIL Imagse instance to Numpy arrays: https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/img_to_array . | image_np_arries = [] for image_path in image_paths: image_pil = tf.keras.preprocessing.image.load_img(image_path) #(1) image_np_array = tf.keras.preprocessing.image.img_to_array(image_pil) #(2) image_np_arries.append(image_np_array) height, width, _ = image_np_array.shape print(&quot;height/width of {} : {}/{}&quot;.format(os.path.basename(image_path),image_np_array.shape[0],image_np_array.shape[1])) image_np_array_batch = np.array(image_np_arries) . height/width of boot_ganga_1.jpg : 800/1200 height/width of boot_ganga_2.jpg : 800/1200 (800, 1200, 3) . Original Images . for idx, image_np_array in enumerate(image_np_array_batch): plt.figure(figsize=(12,12)) plt.title(os.path.basename(image_paths[idx])) plt.imshow(image_np_array/255.0) plt.show() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T21:32:54.455137 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T21:32:54.890457 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Cropping the images . 1) Creating a CenterCrop layer for given target height &amp; width with Kears https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/CenterCrop . 2) Cropping the image . center_crop_layer = tf.keras.layers.experimental.preprocessing.CenterCrop(target_height,target_width) #(1) image_cropped_np_array_batch = center_crop_layer(image_np_array_batch) #(2) print(&quot;Keras CenterCrop Layer output shape (Numpy Array): {}&quot;.format(image_cropped_np_array_batch.shape)) . Keras CenterCrop Layer output shape (Numpy Array): (2, 200, 800, 3) . The glorious result . for idx, image_cropped_np_array in enumerate(image_cropped_np_array_batch): plt.figure(figsize=(8,8)) plt.title(os.path.basename(image_paths[idx])) plt.imshow(image_cropped_np_array/255.0) plt.show() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T15:58:48.218926 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T15:58:48.406787 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/",
            "url": "https://dorjeduck.github.io/ai-candies/2020/10/26/image-center-crop.html",
            "relUrl": "/2020/10/26/image-center-crop.html",
            "date": " • Oct 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Resizing an image with a Keras Layer",
            "content": "Mirror facing mirror - nowhere else. . – Ikkyu . In this short tutorial we will discuss one way of resizing an image with the use of a Tensorflow Keras Layer. Would we recommend to use Tensorflow to achieve this single purpose? No. Yet please bear in mind, these early posts are meant to learn the building blocks for fancy models later on ... . Enjoy . Getting ready . import numpy as np import tensorflow as tf from matplotlib import pyplot as plt from IPython import display image_path = &#39;./images/fujiyama.png&#39; . Preprocessing image . Loading the image file into PIL format: https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/load_img . | Converting the PIL Image instance to a Numpy array: https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/img_to_array . | Determining the height and width of the image. . | Converting the single image into a batch. (Keras layers are expecting a batch as input.) . | image_pil = tf.keras.preprocessing.image.load_img(image_path) #(1) image_np_array = tf.keras.preprocessing.image.img_to_array(image_pil) #(2) print(&quot;Image numpy array shape: {}&quot;.format(image_np_array.shape)) height,width,_ = image_np_array.shape #(3) image_np_array_batch = np.array([image_np_array]) #(4) . Image numpy array shape: (1024, 1536, 3) . Original Image . plt.figure(figsize=(12,12)) plt.title(&#39;Original Image&#39;) plt.imshow(image_np_array/255.0) plt.show() print(&quot; nImage height/width: {}/{} n&quot;.format(height,width)) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T21:30:52.265579 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Image height/width: 1024/1536 . Resizing the image . 1) Creating an Image resizing layer for given target height &amp; width with Kears https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/Resizing . 2) Resizing the image . height_resized = height // 2 width_resized = width // 2 print(&quot;Desired target image height/width: {}/{}&quot;.format(height_resized,width_resized)) resize_layer = tf.keras.layers.experimental.preprocessing.Resizing(height_resized,width_resized,interpolation=&#39;bilinear&#39;) #(1) image_resized_np_array_batch = resize_layer(image_np_array_batch) #(2) print(&quot;Keras Resizing Layer output shape (Numpy Array): {}&quot;.format(image_resized_np_array_batch.shape)) . Desired output image height/width: 512/768 Keras Resizing Layer output shape (Numpy Array): (1, 512, 768, 3) . The glorious result . image_resized_np_array = image_resized_np_array_batch[0] height_resized,width_resized,_ = image_resized_np_array.shape plt.figure(figsize=(6,6)) plt.title(&#39;Resized Image&#39;) plt.imshow(image_resized_np_array/255.0) plt.show() print(&quot; nResized image height/width: {}/{} n&quot;.format(height_resized,width_resized)) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-10-26T21:31:26.919101 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Resized image height/width: 512/768 .",
            "url": "https://dorjeduck.github.io/ai-candies/2020/10/25/image-resizing.html",
            "relUrl": "/2020/10/25/image-resizing.html",
            "date": " • Oct 25, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Hello visual world",
          "content": "I study my mind and therefore all appearances are my texts. . – Milarepa . This blog is driven by the idea to teach myself how to process and generate images with Tensorflow. The early posts will mostly cover basic techniques which hopefully come in handy years later when I start trying to impress myself with more complex models based on these earlier insights. . Please feel invited to come along with me on this journey. I will try to include links to the respective parts of the excellent Tensorflow documentation or other gems on the web as much as possible in order to make this whole endeavour at least of some benefit. . As always, feedback and suggestions of any kind are highly appreciated. .",
          "url": "https://dorjeduck.github.io/ai-candies/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dorjeduck.github.io/ai-candies/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}